#include <iostream>
#include <windows.h>
#include <vector>
#include <sstream>

using namespace std;

struct text_info {
    unsigned char winright, winbottom; // столбец, строка правого нижнего угла
    unsigned char attribute, normattr; // атрибуты окна
    unsigned char currmode; // текущий режим работы видеоадаптера
    unsigned char screenheight; // полная высота экрана
    unsigned char screenwidth; // полная ширина экрана
    unsigned char curx, cury;  // строка, столбец текущей позиции курсора
};

struct line_info {
    string text;
    int color;
};

void window(int left, int top, int right, int bottom) {
    static text_info current_window;

    current_window.winright = right;
    current_window.winbottom = bottom;
    current_window.curx = left;
    current_window.cury = top;

    // Для проверки верности координат
    cout << "Window is (" << left << ", " << top << ") (" << right << ", " << bottom << ")\n";
}

void setCursorPosition(int x, int y) { // Устанавливает позицию курсора в консоли
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void setTextColor(int color) { // Устанавливает цвет текста и фона в консоли
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

int main() {
    int x1 = 25, y1 = 10, x2 = 55, y2 = 20; // Координаты окошка
    int T = 200; // 0.2 секунды в миллисекундах
    int S = 3; // Шаг вниз
    int tmp = y1;

    window(x1, y1, x2, y2); // Объявление окошка

    vector<line_info> lines; // Вектор для хранения строк и их цветов

    // Циклирую все возможные комбинации цветов и фонов через битовые операции
    for (int bgColor = 0; bgColor < 16; ++bgColor) {
        for (int textColor = 0; textColor < 16; ++textColor) {
            int color = (bgColor << 4) | textColor; // Первые 4 бита - цвет фона. Вторые 4 бита - цвет текста

            ostringstream oss;
            if (textColor <= 9 ) oss << "Background: " << bgColor << " Text:  " << textColor;
            else oss << "Background: " << bgColor << " Text: " << textColor;
            
            line_info li;
            li.text = oss.str();
            li.color = color; // Хранение информации о цвете для текущей строки
            lines.push_back(li); // Добавление строки в вектор

            // Выводим строки
            for (int i = 0; i < lines.size(); ++i) {
                setTextColor(lines[i].color); // Установка цвета для этой конкретной строки
                setCursorPosition(x1, y1 + i * S);
                cout << lines[i].text;
            }

            // Если количество строк превысило размеры окна, удаляем самую старую
            if (lines.size() > (y2 - y1) / S) {
                lines.erase(lines.begin());
            }

            Sleep(T); // Пауза на T миллисекунд
        }
    }
    
    return 0;
}
